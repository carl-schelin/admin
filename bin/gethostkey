#!/bin/ksh

# gethostkey - Get the host key for the server
# Owner: Carl Schelin
# 

PROGNAME="gethostkey"
ADMIN=/usr/local/admin
LOG=$ADMIN/logs

if [[ -f $LOG/hostkey.password ]]
then
  rm $LOG/hostkey.password
fi
if [[ -f $LOG/hostkey.timedout ]]
then
  rm $LOG/hostkey.timedout
fi
if [[ -f $LOG/hostkey.timeout ]]
then
  rm $LOG/hostkey.timeout
fi

echo "Legend:"
echo "h - No Hostkey"
echo "f - No FQDN Hostkey"
echo ". - Waiting for response from server"
echo "* - Responded, exiting loop"
echo "p - Password requested"
echo "d - Timedout"
echo "t - Timeout"
echo ""

for i in `grep -v "^#" $ADMIN/etc/servers`
do
  SERVER=`echo $i|cut -f1 -d:`
  FQDN=`echo $i|cut -f2 -d:`
  OS=`echo $i|cut -f3 -d:`

# add the dot for the scp command
  if [[ ! -z $FQDN ]]
  then
    FQDN=".$FQDN"
  fi

# Check to make sure the target directory exists
# if not, create it and set the perms

  SVRPATH="$LOG/servers/$SERVER"

  if [ ! -d $SVRPATH ]
  then
    mkdir -p $SVRPATH
    chmod 775 $SVRPATH
  fi

  TIMEOUT=180

# Content here: ssh to the server using the hostkey command

  CONTENT="hostkey"

  if [ -f $SVRPATH/$CONTENT.output ]
  then
    rm $SVRPATH/$CONTENT.output
  fi

# we want both host keys
  PID=''
  EXISTS=`grep -i "^$SERVER" ~/.ssh/known_hosts`
  if [[ -z $EXISTS ]]
  then
#    echo "$SERVER: No hostkey"
    echo -n "h"
    $ADMIN/bin/hostkey -user unixsvc -host $SERVER > $SVRPATH/$CONTENT.output 2>&1 &
    PID=$!
  fi
  EXISTS=`grep -i "^$SERVER$FQDN" ~/.ssh/known_hosts`
  if [[ -z $EXISTS ]]
  then
#    echo "$SERVER$FQDN: No hostkey"
    echo -n "f"
    $ADMIN/bin/hostkey -user unixsvc -host $SERVER$FQDN >> $SVRPATH/$CONTENT.output 2>&1 &
    PID=$!
  fi

# wait for the specified number of seconds for scp to complete
# if the timeout is exceeded, kill the process and move on to the next box

  if [[ ! $PID = '' ]]
  then
# .2 seems to pause enough for the scp command to finish without taking a full second for each system.
    /usr/bin/perl -e 'select(undef,undef,undef,.2)'
    /usr/bin/ps -p $PID > /dev/null 2>&1
    if [[ $? -eq 0 ]]
    then
      while [[ $TIMEOUT -gt 0 ]]
      do
        echo -n "."
        /usr/bin/ps -p $PID > /dev/null 2>&1
        if [[ $? -ne 0 ]]
        then
          echo -n "*"
          break
        fi
        TIMEOUT=$(($TIMEOUT - 1))
        sleep 1
      done

# if the timeout reaches 0, then the process was killed. Report something.

      if [[ $TIMEOUT -le 0 ]]
      then
        echo "ERROR: Unable to connect to server ($PROGNAME)" >> $SVRPATH/config.status
        echo "ERROR: Unable to connect to server ($PROGNAME)" >> $SVRPATH/morning.status
        chmod 664 $SVRPATH/config.status
        chmod 664 $SVRPATH/morning.status
        kill -KILL $PID
      fi
    fi
  fi

# if there's no output, delete the 0 byte file

  if [ ! -s $SVRPATH/$CONTENT.output ]
  then
    if [ -f $SVRPATH/$CONTENT.output ]
    then
      rm $SVRPATH/$CONTENT.output
    fi
  fi
 
# set the perms as the last step

  if [ -f $SVRPATH/$CONTENT.output ]
  then
    chmod 664 $SVRPATH/$CONTENT.output
  fi

# Checking for the password or timeout responses from hostkey:
#   Timed out sshing to $OPTS(host)...
#   Unable to ssh to $OPTS(host)...
#   Exiting $OPTS(host) at password prompt...
#   Exiting $OPTS(host) at login prompt...

  if [[ -f $SVRPATH/$CONTENT.output ]]
  then

    OUTPUT=`grep "login prompt" $SVRPATH/$CONTENT.output`
    if [[ ! -z $OUTPUT ]]
    then
      echo "WARNING: Login to server from unix service account requiring a login." >> $SVRPATH/config.status
      echo "WARNING: Login to server from unix service account requiring a login." >> $SVRPATH/morning.status
      echo -n "p"
      echo "$SERVER Login" >> $LOG/hostkey.login
    fi

    OUTPUT=`grep "password prompt" $SVRPATH/$CONTENT.output`
    if [[ ! -z $OUTPUT ]]
    then
      echo "WARNING: Login to server from unix service account requires a password." >> $SVRPATH/config.status
      echo "WARNING: Login to server from unix service account requires a password." >> $SVRPATH/morning.status
      echo -n "p"
      echo "$SERVER Password" >> $LOG/hostkey.password
    fi

    OUTPUT=`grep "sshing to" $SVRPATH/$CONTENT.output`
    if [[ ! -z $OUTPUT ]]
    then
      echo "WARNING: Login to server from unix service account timed out." >> $SVRPATH/config.status
      echo "WARNING: Login to server from unix service account timed out." >> $SVRPATH/morning.status
      echo -n "d"
      echo "$SERVER Timedout" >> $LOG/hostkey.timedout
    fi

    OUTPUT=`grep "ssh to" $SVRPATH/$CONTENT.output`
    if [[ ! -z $OUTPUT ]]
    then
      echo "WARNING: Login to server from unix service unable to connect." >> $SVRPATH/config.status
      echo "WARNING: Login to server from unix service unable to connect." >> $SVRPATH/morning.status
      echo -n "t"
      echo "$SERVER Connect" >> $LOG/hostkey.connect
    fi
  fi

done

exit 0

