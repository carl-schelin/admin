#!/bin/ksh

# So pass the three letter code to this script for when to gather data.

BASENAME=$(basename "$0")
DIRNAME=$(dirname "$0")

if [[ ! -f ${DIRNAME}/../.config ]]
then
  echo "Unable to locate ${DIRNAME}/../.config. Exiting."
  exit 1
fi

# Source the configuration file
. "${DIRNAME}"/../.config

if [[ ! $RUNBY -eq 5000 ]]
then
  echo "This script must be run by the Unix Service account."
  exit 0
fi

PROGNAME="getservices"

for i in `grep -v "^#" ${ADMIN_DATA}/servers`
do
  SERVER=`echo $i | cut -f1 -d:`
  OS=`echo $i | cut -f3 -d:`
  TIME=`echo $i | cut -f4 -d:`
  TIMEOUT=80

  echo $SERVER

  if [[ ! -d ${ADMIN}/servers/$SERVER ]]
  then
    mkdir ${ADMIN}/servers/$SERVER
  fi

  if [[ $OS = "Linux" ]]
  then
    /usr/bin/ssh $SERVER "/sbin/chkconfig --list" | grep ":on	" | sort > ${ADMIN}/servers/$SERVER/services.output &
    PID=$!
  fi
  if [[ $OS = "SunOS" ]]
  then
    /usr/bin/ssh $SERVER "/usr/bin/svcs" | grep -v offline | sort > ${ADMIN}/servers/$SERVER/services.output &
    PID=$!
  fi

# wait for the specified number of seconds for the script to complete
# if the timeout is exceeded, kill the process and move on to the next box

# .2 seems to pause enough for the scp command to finish without taking a full second for each system.
  /usr/bin/perl -e 'select(undef,undef,undef,.2)'
  /usr/bin/ps -p $PID > /dev/null 2>&1
  if [[ $? -eq 0 ]]
  then
    while [[ $TIMEOUT -gt 0 ]]
    do
      /usr/bin/ps -p $PID > /dev/null 2>&1
      if [[ $? -ne 0 ]]
      then
        break
      fi
      TIMEOUT=$(($TIMEOUT - 1))
      sleep 1
    done

# if the timeout reaches 0, then the process was killed.

    if [[ $TIMEOUT -le 0 ]]
    then
      kill -KILL $PID
      echo "ERROR Unable to contact $SERVER to retrieve its process output" > $LOC/servers/$SERVER/services.output
    fi
  fi

done

