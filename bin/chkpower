#!/bin/ksh

# chkpower - Verify that servers are up and have been up for a bit.
# Owner: Carl Schelin

BASENAME=$(basename "$0")
DIRNAME=$(dirname "$0")

if [[ ! -f ${DIRNAME}/../.config ]]
then
  echo "Unable to locate ${DIRNAME}/../.config. Exiting."
  exit 1
fi

# Source the configuration file
. "${DIRNAME}"/../.config

PROGNAME="chkpower"

if [[ ! $RUNBY -eq 5000 ]]
then
  echo "This script must be run by the Unix Service account."
  exit 0
fi

if [[ -f /var/tmp/$PROGNAME.pid ]]
then
  PID=`cat /var/tmp/$PROGNAME.pid`
  RUNNING=`/usr/bin/ps -ef | /usr/bin/grep $PID | /usr/bin/grep -v grep`
  if [[ ! -z $RUNNING ]]
  then
    echo "Script is running. Please try again later. $RUNNING" | /usr/bin/mailx -s "Server Check in progress" $WHOCARES
    exit 0
  fi
fi

echo $$ > /var/tmp/$PROGNAME.pid

# check to see if the server passed exists in the server listing or if it equals '[A|a]ll', otherwise exit without error
if [[ -z $1 ]]
then
  SERVERLIST=`grep -v "^#" ${SCRIPTS_ETC}/powerlist`
  SINGLESERVER="no"
else
  if [[ $1 = "all" || $1 = "All" || $1 = "ALL" ]]
  then
    SERVERLIST=`grep -v "^#" ${SCRIPTS_ETC}/powerlist`
    SINGLESERVER="no"
  else
    /usr/bin/grep -i "^${1}:" ${SCRIPTS_ETC}/powerlist > /dev/null
    if [[ $? -ne 0 ]]
    then
      exit 0
    else
      SERVERLIST=$1
      SINGLESERVER="yes"
    fi
  fi
fi

if [[ -f /var/tmp/$PROGNAME.output ]]
then
  rm /var/tmp/$PROGNAME.output
fi

for i in $SERVERLIST
do
  SERVER=`echo $i|cut -f1 -d:`
  OS=`echo $i|cut -f3 -d:`

# Check to make sure the target directory exists
# if not, create it and set the perms

  SVRPATH="${SCRIPTS}/servers/$SERVER"

  if [ ! -d $SVRPATH ]
  then
    mkdir $SVRPATH
    chmod 775 $SVRPATH
  fi

  TIMEOUT=90

# Content here: scp the config file from here

  CONTENT="chkpower"

  if [ -f $SVRPATH/$CONTENT.output ]
  then
    rm $SVRPATH/$CONTENT.output
  fi

  /usr/bin/ssh $SERVER "/usr/bin/uptime" > $SVRPATH/$CONTENT.output &
  PID=$!

# wait for the specified number of seconds for ssh to complete
# if the timeout is exceeded, kill the process and move on to the next box

  while [[ $TIMEOUT -gt 0 ]]
  do
    /usr/bin/ps -p $PID > /dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
      break
    fi
    TIMEOUT=$(($TIMEOUT - 1))
    sleep 1
  done

# if the timeout reaches 0, then the process was killed. Report something.

  if [[ $TIMEOUT -le 0 ]]
  then
    echo "ERROR: Unable to connect to server ($SERVER)" >> /var/tmp/$CONTENT.output
    chmod 664 /var/tmp/$CONTENT.status
    kill -KILL $PID
  fi

# if there's no output, delete the 0 byte file

  if [ ! -s $SVRPATH/$CONTENT.output ]
  then
    rm $SVRPATH/$CONTENT.output
  fi

# set the perms as the last step

  if [ -f $SVRPATH/$CONTENT.output ]
  then
    chmod 664 $SVRPATH/$CONTENT.output
  fi

# This is the validate output section. If you need to check for certain values or otherwise process
# the results of the above command, do it here.

  if [ -f $SVRPATH/$CONTENT.output ]
  then
    UPTIME=`cat $SVRPATH/$CONTENT.output`
    echo $SERVER $UPTIME >> /var/tmp/$CONTENT.output
    DAYS=`awk '{print $4}' $SVRPATH/$CONTENT.output`
# if the server's been up for a day or more, ignore the results. Otherwise, report it.
    if [[ $DAYS = "days," || $DAYS = "day(s)," || $DAYS = "day," ]]
    then
      TIME="Placeholder"
    else
      echo "WARNING: $SERVER $UPTIME\n" >> /var/tmp/$CONTENT.output
    fi
  else
      echo "WARNING: $SERVER 'uptime.output' was not created." >> /var/tmp/$CONTENT.output
  fi

done

ERROR=`/usr/bin/grep "^ERROR:" /var/tmp/$CONTENT.output`
WARNING=`/usr/bin/grep "^WARNING:" /var/tmp/$CONTENT.output`
MAIL=/var/tmp/$CONTENT.mail

if [[ -z $ERROR ]]
then
  if [[ $SINGLESERVER = "yes" ]]
  then
    echo "$SERVERLIST was successfully contacted" | /usr/bin/tee $MAIL
    if [[ -f ${SCRIPTS}/servers/$SERVERLIST/uptime.output ]]
    then
      cat ${SCRIPTS}/servers/$SERVERLIST/uptime.output | /usr/bin/tee -a $MAIL
    else
      echo "WARNING: The unixsvc account was able to access the server but unable to run the uptime command. History shows the unixsvc account has been disabled. Please investigate." | /usr/bin/tee -a $MAIL
    fi
  else
    echo "All servers were successfully contacted" | /usr/bin/tee $MAIL
    /usr/bin/grep "^WARNING:" /var/tmp/$CONTENT.output | /usr/bin/tee -a $MAIL
  fi
  cat $MAIL | /usr/bin/mailx -s "Server Check Reports Success" $WHOCARES
else
  if [[ $SINGLESERVER = "yes" ]]
  then
    echo $ERROR | /usr/bin/tee $MAIL
    cat $MAIL | /usr/bin/mailx -s "ERROR: Server Check Reports Failure" $WHOCARES
  else
    echo "The following servers were unsuccessfully contacted:" | /usr/bin/tee $MAIL
    /usr/bin/grep "^ERROR:" /var/tmp/$CONTENT.output | /usr/bin/tee -a $MAIL
    cat $MAIL | /usr/bin/mailx -s "ERROR: Server Check Reports Failures" $WHOCARES
  fi
fi

if [[ -f /var/tmp/$CONTENT.pid ]]
then
  rm /var/tmp/$CONTENT.pid
fi

exit 0

