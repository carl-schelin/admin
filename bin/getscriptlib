#!/bin/ksh

# getunixsuite - Carl Schelin - 2012-07-30
# Script to manage the general data capture from all systems
#
# Note: This script only runs the one-time only scripts. Anything that needs to run often 
# during the day should have their own entries in cron
#
# Changelog:
# 2012-07-30 - Initial convert system based company script to central host based company script
# 2012-09-28 - Start off with a few scripts and add new ones in as we go along.
# 2012-10-02 - Correct script location in the runscript function.
# 2012-10-03 - Changed script name and log file from company to getunixsuite to avoid confusion with the other master "company" script.
# 2013-11-07 - Changed entry from "runscript getunixsuite" to "runscript getunixsuitelogs".
# 2014-10-07 - Added getbash script
# 2014-11-09 - Added getpackages script
# 2014-11-12 - Added getcrash script
# 2014-11-12 - Added getghost script
# 2014-11-12 - Added chkmounts script
# 2015-09-13 - disabled timeout in the function; scripts should already have an individual server timeout.
# 2016-12-08 - moved to /usr/local/admin/bin directory and fixed locations of getunixsuite.log file

SCRIPTS=/usr/local/admin
SCRIPTS_BINS=${SCRIPTS}/bin
SCRIPTS_DATA=${SCRIPTS}/etc
SCRIPTS_LOGS=${SCRIPTS}/logs
HOSTNAME=`hostname|cut -f1 -d.`
LOG=$SCRIPTS_LOGS/getunixsvc/getunixsvc.log
EXITCODE=0
OS=`uname`
DATE=`date +"%Y%m%d"`
# Day of Week 1=Monday, 7=Sunday
DOWEEK=`date +"%u"`
# Day of Month, 01-31
DOMONTH=`date +"%d"`

# Roll and compress the logs at the beginning of the month
if [[ $DOMONTH = '01' ]]
then
  cp $LOG $LOG.$DATE
  cat /dev/null > $LOG
  gzip -9 $LOG.$DATE
fi

# ensure directory exists and is writeable
if [[ ! -d $SCRIPTS_LOGS/getunixsvc ]]
then
  mkdir -p $SCRIPTS_LOGS/getunixsvc
  chown unixsvc:sysadmin $SCRIPTS_LOGS/getunixsvc
  chmod 770 $SCRIPTS_LOGS/getunixsvc
fi

echo "`date` getunixsvc script started" >> $LOG

# First ensure the unixsuite directory structure is owned properly so data files can be written
chown -R unixsvc:sysadmin $SCRIPTS_LOGS/getunixsvc
chmod -R 770 $SCRIPTS_LOGS/getunixsvc

# function to run the scripts and set a timeout. this ensures all scripts exit before the final cleanup
runscript () {

  if [[ -f ${SCRIPTS_BINS}/$1 ]]
  then
    ${SCRIPTS_BINS}/$1 >> $LOG
#    PID=$!
#
## really just wait for the scripts to end. don't expect it to take long.
## the scripts should have their own timeout process as well so this should 
##   be larger than the default script timeouts
#    TIMEOUT=3400
#
#    while [[ $TIMEOUT -gt 0 ]]
#    do
#      /usr/bin/ps -p $PID > /dev/null 2>&1
#      if [[ $? -ne 0 ]]
#      then
#        break
#      fi
#      TIMEOUT=$(($TIMEOUT - 1))
#      sleep 1
#    done
#
## if the timeout reaches 0, then the process was killed. report something
#
#    if [[ $TIMEOUT -le 0 ]]
#    then
#      echo "ERROR: $1 failed to exit in $TIMEOUT seconds" >> $LOG
#      kill -KILL $PID
#    else
#      FINISHED=$((3400 - $TIMEOUT))
#      echo "$1 ran in $FINISHED seconds" >> $LOG
#    fi
  else
    echo "$1 script doesn't exist" >> $LOG
  fi

# pause to let the scripts finish 
  sleep 3

  return
}


# Changes, the getetc script will retrieve the 'etc.tar' file from each server
# and put it into the central directory.
# Once done, the process etc script will run through and do the function of all 
# old scripts.

runscript getetc

# now process the files

runscript processetc

# as scripts are converted to use processetc, comment them out.


# there will be a few scripts that can't be processed such as 
# getspace which just runs a 'df -k' on each system to an output 
# file. Those will stay here.
# note the ones checked and that will stay and comment out 
# the ones that are merged into processetc.

# This is the beginning of the process to run all admin scripts sequentially.
# Start out with a few of the easier scripts and add more as it seems to work correctly.

# commenting out scripts being managed by processetc

#runscript getapa
#runscript getarcconf
#runscript getarray
#runscript getbackups
#runscript getbash
#runscript getbashcve
#runscript getchkvx
# gets the config files for the two time tools
#runscript getchronyd
#
#runscript getcluster
#runscript getcrash
#runscript getdef
#runscript geteeprom
#runscript geteth
#runscript getghost
#runscript getghostcve
#runscript getmegarc
#runscript getmetadb
#runscript getmetastat
#runscript getnetstat
# gets the config files for the two time tools
#runscript getntpd
#
#runscript getpackages
#runscript getports
#runscript getprocesses
#runscript getprtdiag
#runscript getpwck
#runscript getraid
#runscript getroutes
#runscript getsan
#runscript getsecurity
#runscript getstack
#runscript getversions
#runscript getvxprint




# scripts that perform tasks remotely

# runs a df -k - Want current info, not info from 1am
runscript getspace

# runs an iostat -En - Want current info, not info from 1am
runscript getiostat

# gets the system and sysctl.conf files from their installed locations vs /opt/unixsuite/etc
runscript getkernel

# checks the mount status on linux systems
#runscript getmounts

# a bit more complcated; extra comparisons or validates vs a straight copy or copy/compare.

runscript getif


# being reviewed for inclusion to the process etc script

#runscript getscanraid osf only
#runscript getsaraid script gone
runscript mkgoodsudo
runscript getsudo
runscript gettime
runscript getmpathd
runscript chkcfg2html
#runscript gethpevent
runscript getsuitelogs
#runscript amberck.pl
runscript getusers
runscript getsudoers
runscript getservices
runscript getsys
#runscript chkprocesses


# all done, create the reports.

runscript showbackups
runscript showbash
runscript showdef
runscript showmpathd
runscript showntp
runscript showghost
runscript showsudo
runscript showusers

# And finish the log
echo "`date` getunixsuite script ended" >> $LOG
echo "======================" >> $LOG

# Clean up the old data files in case they exist.
find $SCRIPTS_LOGS/getunixsuite -atime +1 -exec rm {} \;

exit $EXITCODE

