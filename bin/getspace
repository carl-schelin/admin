#!/bin/ksh

# getspace - Retrieve the output of df -k
# Owner: Carl Schelin

BASENAME=$(basename "$0")
DIRNAME=$(dirname "$0")

if [[ ! -f ${DIRNAME}/../.config ]]
then
  echo "Unable to locate ${DIRNAME}/../.config. Exiting."
  exit 1
fi

# Source the configuration file
. "${DIRNAME}"/../.config

if [[ ! ${RUNBY} -eq 5000 ]]
then
  echo "This script must be run by the Unix Service account."
  exit 0
fi

PROGNAME="getspace"

CHECK=${ADMIN_DATA}/diskspace.dat
FILESYSTEMS=${ADMIN_DATA}/filesystems

for i in `grep -v "^#" ${ADMIN_DATA}/servers`
do
  SERVER=`echo $i|cut -f1 -d:`
  OS=`echo $i|cut -f3 -d:`

  echo $SERVER

# Check to make sure the target directory exists
# if not, create it and set the perms

  SVRPATH="${ADMIN}/servers/$SERVER"

  if [ ! -d $SVRPATH ]
  then
    mkdir $SVRPATH
    chmod 775 $SVRPATH
  fi

# clear the morning.status report
  if [ -f $SVRPATH/morning.status ]
  then
    rm $SVRPATH/morning.status
  fi

  TIMEOUT=80

# Content here: scp the config file from here

  CONTENT="diskspace"

  if [ -f $SVRPATH/$CONTENT.output ]
  then
    rm $SVRPATH/$CONTENT.output
  fi

  if [[ $OS = "HP-UX" ]]
  then
    /usr/bin/ssh $SERVER "/usr/bin/bdf -l" > $SVRPATH/$CONTENT.output &
    PID=$!
  fi
  if [[ $OS = "OSF1" ]]
  then
    /usr/bin/ssh $SERVER "/bin/df -kP" > $SVRPATH/$CONTENT.output &
    PID=$!
  fi
  if [[ $OS = "Linux" ]]
  then
    /usr/bin/ssh $SERVER "/bin/df -klP" > $SVRPATH/$CONTENT.output &
    PID=$!
  fi
  if [[ $OS = "SunOS" ]]
  then
    /usr/bin/ssh $SERVER "/usr/bin/df -kl" > $SVRPATH/$CONTENT.output &
    PID=$!
  fi
  if [[ $OS = "FreeBSD" ]]
  then
    /usr/bin/ssh $SERVER "/bin/df -kl" > $SVRPATH/$CONTENT.output &
    PID=$!
  fi

# wait for the specified number of seconds for scp to complete
# if the timeout is exceeded, kill the process and move on to the next box

# .2 seems to pause enough for the scp command to finish without taking a full second for each system.
  /usr/bin/perl -e 'select(undef,undef,undef,.2)'
  /usr/bin/ps -p $PID > /dev/null 2>&1
  if [[ $? -eq 0 ]]
  then
    while [[ $TIMEOUT -gt 0 ]]
    do
      /usr/bin/ps -p $PID > /dev/null 2>&1
      if [[ $? -ne 0 ]]
      then
        break
      fi
      TIMEOUT=$(($TIMEOUT - 1))
      sleep 1
    done

# if the timeout reaches 0, then the process was killed. Report something.

    if [[ $TIMEOUT -le 0 ]]
    then
      echo "ERROR: Unable to connect to server ($PROGNAME)" >> $SVRPATH/config.status
      echo "ERROR: Unable to connect to server ($PROGNAME)" >> $SVRPATH/morning.status
      chmod 664 $SVRPATH/config.status
      chmod 664 $SVRPATH/morning.status
      kill -KILL $PID
    fi
  fi

# if there's no output, delete the 0 byte file

  if [ ! -s $SVRPATH/$CONTENT.output ]
  then
    rm $SVRPATH/$CONTENT.output
  fi

# set the perms as the last step

  if [ -f $SVRPATH/$CONTENT.output ]
  then
    chmod 664 $SVRPATH/$CONTENT.output
  fi

  if [[ -f $FILESYSTEM ]]
  then
    if [[ -f $SVRPATH/$CONTENT.output ]]
    then
      if [[ $OS = "Linux" || $OS = "SunOS" || $OS = "HP-UX" || $OS = "FreeBSD" ]]
      then
#disk partitions that we want to check specifically
        for j in `egrep "^(/dev|all_space|cloifs_pool|diskpool|rpool|sanpool|space|syslog_local|syslog_san)/" $SVRPATH/diskspace.output | awk '{print $NF":"$5}'`
        do
          FILESYSTEM=`echo $j | cut -f1 -d:`
          SPACE=`echo $j | cut -f2 -d: | cut -f1 -d%`

          WARNING=85
          SPCHK=`grep "^${SERVER}:${FILESYSTEM}:" ${CHECK} | cut -f3 -d:`
          if [ ! "$SPCHK" = "" ]
          then
            WARNING=$SPCHK
          fi

          ERROR=95
          SPCHK=`grep "^${SERVER}:${FILESYSTEM}:" ${CHECK} | cut -f4 -d:`
          if [ ! "$SPCHK" = "" ]
          then
            ERROR=$SPCHK
          fi

          if [[ $SPACE -ge $ERROR ]]
          then
            echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.status
            echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/morning.status
            echo "ERROR: $FILESYSTEM has reached ${SPACE}%"

# we have a filesystems file in ${ADMIN_DATA}/filesystems. It has servername:filesystem:group name
            grep "${SERVER}:${FILESYSTEM}:Database Administration SFS" ${FILESYSTEMS}
            if [[ $? -eq 0 ]]
            then
              echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.dba.status
            fi

            grep "${SERVER}:${FILESYSTEM}:Datavail" ${FILESYSTEMS}
            if [[ $? -eq 0 ]]
            then
              echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.datavail.status
            fi

            grep "${SERVER}:${FILESYSTEM}:System Administration Web Applications SFS" ${FILESYSTEMS}
            if [[ $? -eq 0 ]]
            then
              echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.web.status
            fi

# the IEN Voice team is different as there are two teams that merged into one.
            grep "${SERVER}:${FILESYSTEM}:System Administration (IENV) and i3 SFS" ${FILESYSTEMS}
            if [[ $? -eq 0 ]]
            then
              echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.ienv.status
            fi

            grep "${SERVER}:${FILESYSTEM}:System Administration IENV and (i3) SFS" ${FILESYSTEMS}
            if [[ $? -eq 0 ]]
            then
              echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.ienv.status
            fi

            grep "${SERVER}:${FILESYSTEM}:System Administration ALIM SFS" ${FILESYSTEMS}
            if [[ $? -eq 0 ]]
            then
              echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.alim.status
            fi

            grep "${SERVER}:${FILESYSTEM}:Systems Administration Mobility SFS" ${FILESYSTEMS}
            if [[ $? -eq 0 ]]
            then
              echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.mobility.status
            fi

            grep "${SERVER}:${FILESYSTEM}:Cloud Services Engineering" ${FILESYSTEMS}
            if [[ $? -eq 0 ]]
            then
              echo "ERROR: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.platforms.status
            fi

          else
            if [[ $SPACE -ge $WARNING ]]
            then
              echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.status
              echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/morning.status
              echo "WARNING: $FILESYSTEM has reached ${SPACE}%"

# we have a filesystems file in /usr/local/admin/etc/filesystems. It has servername:filesystem:group name
              grep "${SERVER}:${FILESYSTEM}:Database Administration SFS" ${FILESYSTEMS}
              if [[ $? -eq 0 ]]
              then
                echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.dba.status
              fi

              grep "${SERVER}:${FILESYSTEM}:Datavail" ${FILESYSTEMS}
              if [[ $? -eq 0 ]]
              then
                echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.datavail.status
              fi
  
              grep "${SERVER}:${FILESYSTEM}:System Administration Web Applications SFS" ${FILESYSTEMS}
              if [[ $? -eq 0 ]]
              then
                echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.web.status
              fi

# the IEN Voice team is different as there are two teams that merged into one.
              grep "${SERVER}:${FILESYSTEM}:System Administration (IENV) and i3 SFS" ${FILESYSTEMS}
              if [[ $? -eq 0 ]]
              then
                echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.ienv.status
              fi

              grep "${SERVER}:${FILESYSTEM}:System Administration IENV and (i3) SFS" ${FILESYSTEMS}
              if [[ $? -eq 0 ]]
              then
                echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.ienv.status
              fi
  
              grep "${SERVER}:${FILESYSTEM}:System Administration ALIM SFS" ${FILESYSTEMS}
              if [[ $? -eq 0 ]]
              then
                echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.alim.status
              fi

              grep "${SERVER}:${FILESYSTEM}:Systems Administration Mobility SFS" ${FILESYSTEMS}
              if [[ $? -eq 0 ]]
              then
                echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.mobility.status
              fi

              grep "${SERVER}:${FILESYSTEM}:Cloud Services Engineering" ${FILESYSTEMS}
              if [[ $? -eq 0 ]]
              then
                echo "WARNING: $FILESYSTEM has reached ${SPACE}%" >> $SVRPATH/config.platforms.status
              fi
            fi
          fi
        done
      fi
    fi
  else
    echo "ERROR: Unable to read diskspace.output file." >> $SVRPATH/config.status
    echo "ERROR: Unable to read diskspace.output file." >> $SVRPATH/morning.status
  fi

done

exit 0

