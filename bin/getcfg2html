#!/bin/ksh 

# getcfg2html - Retrieve the Config 2 Html output from all boxes
# Owner: Carl Schelin
# 2/6/09 - TO - added incoga10/20 incoag10/20 to "renamed" servers
# 2/6/09 - TO - Reveresed the order of the index page to most recent first
# 10/8/09 - TO - added Canada servers to renamed portion
# 10/1/10 - Pietras - added miamflcsmla15 to renamed portion as "n1" 
# 10/2/11 - CS - Changed the retrieval location to /opt/[scripts]/cfghtml
# 10/2/11 - CS - rewrote the script to retrieve an actual file name vs *.html 
#   as some servers have the same internal name so files are overwritten.
# 6/24/13 - CS - Modified code to permit passing a single server to make it
#   easier to update missing cfg2html files
# 6/27/13 - CS - Added the -f for force the copy of the file. Added the code 
#   block to stop the script if not run by unixsvc. Added -r for rebuilding 
#   the html file without retrieving the files from the servers
# 10/9/13 - CS - Add the -d option so you can select the month's index.html 
#   file to be rebuilt

BASENAME=$(basename "$0")
DIRNAME=$(dirname "$0")

if [[ ! -f ${DIRNAME}/../.config ]]
then
  echo "Unable to locate ${DIRNAME}/../.config. Exiting."
  exit 1
fi

# shellcheck source=/dev/null
. "${DIRNAME}"/../.config

CFG="/var/apache2/htsecure/cfg2html"
DATE=$(date +"%Y%m")
FORCE="no"
PROGNAME="getcfg2html"

if [[ ! ${RUNBY} -eq 5000 ]]
then
  echo "This script must be run by the Unix Service account."
  exit 0
fi

FORCE="no"
REBUILD="no"
SERVERLIST=$(grep -v "^#" ${ADMIN_DATA}/servers)

while getopts d:fhrs: VARS
do
  case $VARS in
    d) DATE="${OPTARG}"
       ;;
    f) FORCE="yes"
       ;;
    h) HELP="yes"
       ;;
    r) REBUILD="yes"
       ;;
    s) SERVERLIST=$(grep "^${OPTARG}:" ${ADMIN_DATA}/servers)
       HTML=""
       ;;
  esac
done

if [[ ${REBUILD} = 'no' ]]
then
  DATE=$(date +"%Y%m")
fi
DDIR="${CFG}/${DATE}"
HTML="${DDIR}/index.html"
YEAR=$(echo ${DATE} | cut -c1-4)
MON=$(echo ${DATE} | cut -c5-6)
CHKDATE="${YEAR}-${MON}"

if [[ "${HELP}" = "yes" ]] 
then
  echo "Usage:"
  echo "  getcfg2html -d [YYYYMM] -f -h -r -s [servername]"
  echo "Where:"
  echo "  -d = With -r to Rebuild the index.html file for that date"
  echo "  -f = Force retrieval of file(s)"
  echo "  -h = Help"
  echo "  -r = Rebuild the html file"
  echo "  -s = Get a specific [servername] file"
  exit 0
fi

if [[ ! -d ${DDIR} ]]
then
  mkdir ${DDIR}
  chmod 775 ${DDIR}
fi

if [[ ! ${HTML} == "" ]]
then
  echo "<html>" > ${HTML}
  echo "<head>" >> ${HTML}
  echo "<title>Config2HTML ${DATE}</title>" >> ${HTML}
  echo "<h3 align=center>Config2HTML ${DATE}</h3>" >> ${HTML}
  echo "</head>" >> ${HTML}
  echo "<body>" >> ${HTML}
  echo "" >> ${HTML}
  echo "<ul>" >> ${HTML}
fi

for i in ${SERVERLIST}
do
  SERVER=$(echo ${i}|cut -f1 -d:)
  OS=$(echo ${i}|cut -f3 -d:)
  SVRPATH="${ADMIN_DATA}/servers/${SERVER}"

# some servers are slow to respond
  TIMEOUT=90

# the issue is with dual interface systems, the name of the cfg2html file will be HOSTNAME
# which won't match the management interface DNS name.
# this section pulls the HOSTNAME from the translation file if it exists. If not, it sets it 
# to the inventory name so we know which file to copy and which one to parse.

  HOSTNAME=$(grep "^${SERVER}:" ${ADMIN_DATA}/cfg2html.translations)

# if it's not in the file, it's assumed to be a single interface system and SERVER == HOSTNAME.
  if [[ -z ${HOSTNAME} ]]
  then
    HOSTNAME=${SERVER}
  fi

# Check to make sure the target directory exists
# if not, create it and set the perms

  if [[ ! -d ${SVRPATH} ]]
  then
    mkdir -p ${SVRPATH}
    chmod 775 ${SVRPATH}
  fi

  echo ${SERVER}

# Content here: scp the config file from here

  if [[ ! -f ${DDIR}/${SERVER}.html ]] || [[ "${FORCE}" = "yes" ]] && [[ "${REBUILD}" = "no" ]]
  then
    /usr/bin/scp ${SERVER}:${SCRIPTS}/cfghtml/${HOSTNAME}.html ${DDIR}/${SERVER}.html &
    PID=$!

# wait for the specified number of seconds for scp to complete
# if the timeout is exceeded, kill the process and move on to the next box

# .2 seems to pause enough for the scp command to finish without taking a full second for each system.
    /usr/bin/perl -e 'select(undef,undef,undef,.2)'
    /usr/bin/ps -p ${PID} > /dev/null 2>&1
    if [[ $? -eq 0 ]]
    then
      while [[ ${TIMEOUT} -gt 0 ]]
      do
        /usr/bin/ps -p ${PID} > /dev/null 2>&1
        if [[ $? -ne 0 ]]
        then
          break
        fi
        TIMEOUT=$(($TIMEOUT - 1))
        sleep 1
      done

# if the timeout reaches 0, then the process was killed. Report something.

      if [[ ${TIMEOUT} -le 0 ]]
      then
        echo "ERROR: Unable to connect to server (${PROGNAME})" >> ${SVRPATH}/config.status
        echo "ERROR: Unable to connect to server (${PROGNAME})" >> ${SVRPATH}/morning.status
        chmod 664 ${SVRPATH}/config.status
        chmod 664 ${SVRPATH}/morning.status
        kill -KILL ${PID}
      fi
    fi
  fi

# now parse out the date line for the index.html file

  if [[ ! "${HTML}" == "" ]]
  then
    if [[ -f ${DDIR}/${SERVER}.html ]]
    then
      if [[ ${OS} = "Linux" ]]
      then
        CREATED=$(egrep "Created (2017|2018|2019|2020|2021|2022|2023|2024)" ${DDIR}/${SERVER}.html | head -1 | sed 's/<[^>]*>//g')
        DATE=$(echo ${CREATED} | cut -f2 -d\ )
      fi
      if [[ ${OS} = "SunOS" ]]
      then
        CREATED=$(egrep "Created (2017|2018|2019|2020|2021|2022|2023|2024)" ${DDIR}/${SERVER}.html | head -1 | sed 's/<[^>]*>//g')
        DATE=$(echo ${CREATED} | cut -f2 -d\ )
      fi
      if [[ ${OS} = "FreeBSD" ]]
      then
        CREATED=$(grep "Date & Time" ${DDIR}/${SERVER}.html)
        DATE=$(echo ${CREATED} | awk '{print $5" "$6" "$9}')

        MON=$(echo ${DATE} | cut -f1 -d\ )
        YEAR=$(echo ${DATE} | cut -f3 -d\ )

        case ${MON} in 
          Jan) MON=01 ;;
          Feb) MON=02 ;;
          Mar) MON=03 ;;
          Apr) MON=04 ;;
          May) MON=05 ;;
          Jun) MON=06 ;;
          Jul) MON=07 ;;
          Aug) MON=08 ;;
          Sep) MON=09 ;;
          Oct) MON=10 ;;
          Nov) MON=11 ;;
          Dec) MON=12 ;;
        esac

        DATE="${YEAR}-${MON}"

      fi
      if [[ ${OS} = "HP-UX" ]]
      then
        CREATED=$(egrep "Created (2017|2018|2019|2020|2021|2022|2023)" ${DDIR}/${SERVER}.html | head -1 | sed 's/<[^>]*>//g')
        DATE=$(echo ${CREATED} | head -1 | awk '{print $2}')
      fi
    fi

# break apart the captured date to get the year and month for comparison to the current month and date.
    YEAR=$(echo ${DATE} | cut -f1 -d\-)
    MON=$(echo ${DATE} | cut -f2 -d\-)

    DATE="${YEAR}-${MON}"
    DDATE="${YEAR}${MON}"

# finally add the line to the index.html file

    if [[ -f ${DDIR}/${SERVER}.html ]]
    then
      if [[ ${DATE} = ${CHKDATE} ]]
      then
        echo "  <li><a href=\"/cfg2html/${DDATE}/${SERVER}.html\">${SERVER}</a> - ${CREATED}</li>" >> "$HTML"
      else
        echo "  <li><font color=red><a href=\"/cfg2html/${DDATE}/${SERVER}.html\">${SERVER}</a> - ${CREATED}</font></li>" >> "$HTML"
      fi
      chmod 664 ${DDIR}/${SERVER}.html
    else
      echo "  <li><font color=red>${SERVER} - Config file not found</font></li>" >> "$HTML"
    fi
  fi
done

if [[ ! "${HTML}" == "" ]]
then
  echo "</ul>" >> "${HTML}"
  echo "" >> "${HTML}"
  echo "</body>" >> "${HTML}"
  echo "</html>" >> "${HTML}"
fi

exit 0

