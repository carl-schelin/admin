#!/bin/ksh

# chkstatus - Check the status of errors as reported by the chkserver script
# Carl Schelin

DEBUG='no'
ADMIN=/usr/local/admin
GREP="31m"
ERROR="Must be corrected due to vulnerability or system stability issue"
NOSERVER=""
INCOMPLETE=""
COUNT=0
INCOUNT=0

usage() {
  cat << EOF
chkstatus displays the errors or warnings for all or selected servers

OPTIONS:
  -h - This help - Default
  -d - Enable debug mode; only displays errors that haven't been described in the script
  -t - Type of request:
      e - Errors - Default
      w - Warnings
      b - Both Errors and Warnings
      g - Good
      a - All output (includes Good)
  -i - One server; just report information for a single server
  -r - All servers in a Project; enclose multi-word searches in quotes
  -p - All servers in a Product; enclose multi-word searches in quotes
  -s - Search; enclose multi-word searches in quotes
EOF
}

if [[ -z $1 ]]
then
  usage
  exit 1
fi

if [[ $1 = '-p' ]] && [[ -z $2 ]]
then
  echo "List of Products:"
  for i in `grep -v "^#" $ADMIN/etc/servers | cut -f8 -d: | sort | uniq`
  do
    echo "./chkstatus -p $i"
  done
  exit 1
fi

if [[ $1 = '-r' ]] && [[ -z $2 ]]
then
  echo "List of Projects:"
  for i in `grep -v "^#" $ADMIN/etc/servers | cut -f9 -d: | sort | uniq`
  do
    echo "./chkstatus -r $i"
  done
  exit 1
fi

while getopts dht:i:r:p:s: optchar
do
  case $optchar in
    d) DEBUG='yes'
      ;;
    h) usage
       exit 1
      ;;
    t) case $OPTARG in
         a) GREP="(31m|32m|33m)"
            ERROR="(Must be corrected due to vulnerability or system stability issue|Setting should be reviewed and corrected if appropriate|Test or value was successful)"
            ;;
         b) GREP="(31m|33m)"
            ERROR="(Must be corrected due to vulnerability or system stability issue|Setting should be reviewed and corrected if appropriate)"
            ;;
         e) GREP="31m"
            ERROR="Must be corrected due to vulnerability or system stability issue"
            ;;
         w) GREP="33m"
            ERROR="Setting should be reviewed and corrected if appropriate"
            ;;
         g) GREP="32m"
            ERROR="Test or value was successful"
            ;;
       esac
      ;;
    i) SERVER=$OPTARG
       ;;
    r) PROJECT=`echo $OPTARG | sed -e "s/ /_/g"`
       ;;
    p) PRODUCT=`echo $OPTARG | sed -e "s/ /_/g"`
       ;;
    s) FILTER="(${OPTARG})"
       ;;
    *) usage
       exit 1
       ;;
  esac
done

USER=0
GROUP=0
AGENT=0
FIREWALL=0
TIME=0
SUBMGR=0
CONFIG=0
KUBE=0

ADMIN=/usr/local/admin
DATAFILE=$ADMIN/etc/chkstatus.dat

if [[ -f ${ADMIN}/logs/chkstatus.log ]]
then
  rm ${ADMIN}/logs/chkstatus.log
  touch ${ADMIN}/logs/chkstatus.log
fi

if [[ ! -z ${FILTER} ]]
then
    echo "Filtering on: ${FILTER}"
fi

if [[ ! -z ${SERVER} ]]
then
  SERVERLIST=`grep -v "^#" ${ADMIN}/etc/servers | egrep -i "${SERVER}" | cut -f1 -d:`
  SERVERTOTAL=`egrep -i "${SERVER}" ${ADMIN}/etc/servers | grep -vc "^#"`
else
  if [[ ! -z ${PRODUCT} ]]
  then
    SERVERLIST=`grep -v "^#" ${ADMIN}/etc/servers | egrep -i ":.*${PRODUCT}.*:" | cut -f1 -d:`
    SERVERTOTAL=`egrep -i ":.*${PRODUCT}.*:" ${ADMIN}/etc/servers | grep -vc "^#"`
  else
    if [[ ! -z ${PROJECT} ]]
    then
      SERVERLIST=`grep -v "^#" ${ADMIN}/etc/servers | egrep -i ":.*${PROJECT}.*$" | cut -f1 -d:`
      SERVERTOTAL=`grep -i ":.*${PROJECT}.*$" ${ADMIN}/etc/servers | grep -vc "^#"`
    else
      SERVERLIST=`grep -v "^#" ${ADMIN}/etc/servers | cut -f1 -d:`
      SERVERTOTAL=`grep -vc "^#" ${ADMIN}/etc/servers`
    fi
  fi
fi

if [[ -z ${SERVERLIST} ]]
then
  echo "Server(s) not found."
  exit 1
fi

for i in ${SERVERLIST}
do
  if [[ -f ${ADMIN}/servers/${i}/chkserver.output ]]
  then
    if [[ -z ${FILTER} ]]
    then
      echo ${i} >> $ADMIN/logs/chkstatus.log
      if [[ ${DEBUG} = 'yes' ]]
      then
        egrep "${GREP}" ${ADMIN}/servers/${i}/chkserver.output | egrep -v "${ERROR}" | egrep -v "${DEBUGFILTER}" >> $ADMIN/logs/chkstatus.log
      else
        egrep "${GREP}" ${ADMIN}/servers/${i}/chkserver.output | egrep -v "${ERROR}" >> $ADMIN/logs/chkstatus.log
      fi
    else
      egrep "${GREP}" ${ADMIN}/servers/${i}/chkserver.output | egrep -v "${ERROR}" | egrep -i "${FILTER}" > /dev/null
      if [[ $? = 0 ]]
      then
        echo ${i} >> $ADMIN/logs/chkstatus.log
        egrep "${GREP}" ${ADMIN}/servers/${i}/chkserver.output | egrep -v "${ERROR}" | egrep -i "${FILTER}" >> $ADMIN/logs/chkstatus.log
      fi
    fi
    SERVERTOTAL=$(( $SERVERTOTAL - 1 ))
    printf "%s," $SERVERTOTAL

# check for complete script runs
    grep "^+++chkserver script run completed" ${ADMIN}/servers/${i}/chkserver.output > /dev/null
    if [[ $? -ne 0 ]]
    then
      INCOMPLETE="${INCOMPLETE} $i"
      INCOUNT=$(( $INCOUNT + 1 ))
    fi

  else
# number of servers where no output was generated
    NOSERVER="$NOSERVER $i"
    COUNT=$(( $COUNT + 1 ))
  fi
done

echo ""
echo ""

if [[ $DEBUG = 'yes' ]]
then
  cat $ADMIN/logs/chkstatus.log | egrep ${GREP} | sort | uniq
else
  cat $ADMIN/logs/chkstatus.log
fi

if [[ $DEBUG = 'no' ]] && [[ $GREP = '31m' ]] || [[ $GREP = '(31m|33m)' ]]
then
  echo ""



  echo ""
  echo "Nagios Issues:"
  for j in 0
  do
    CountValue=`grep -c "${NagiosRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${NagiosText[$j]}" "${CountValue}" "./chkstatus -s '${NagiosRegx[$j]}'"
    fi
  done




  echo ""
fi


if [[ $DEBUG = 'no' ]] && [[ $GREP = '33m' ]] || [[ $GREP = "(31m|33m)" ]]
then
  echo ""

  echo ""
  echo "Opnet Agent Issues:"



  for j in 3 4 5
  do
    CountValue=`grep -c "${OpnetRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${OpnetText[$j]}" "${CountValue}" "./chkstatus -t w -s '${OpnetRegx[$j]}'"
    fi
  done



  echo ""
fi

echo "Total Issues: `egrep -c ${GREP} $ADMIN/logs/chkstatus.log`"
echo "Servers with no chkserver.output file: $COUNT ($NOSERVER)"
echo "Servers with incomplete chkserver.output files: $INCOUNT ($INCOMPLETE)"

exit 0

