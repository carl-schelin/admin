#!/bin/ksh

# chkstatus - Check the status of errors as reported by the chkserver script
# Carl Schelin

DEBUG='no'
ADMIN=/usr/local/admin
GREP="31m"
ERROR="Must be corrected due to vulnerability or system stability issue"
NOSERVER=""
INCOMPLETE=""
COUNT=0
INCOUNT=0

usage() {
  cat << EOF
chkstatus displays the errors or warnings for all or selected servers

OPTIONS:
  -h - This help - Default
  -d - Enable debug mode; only displays errors that haven't been described in the script
  -t - Type of request:
      e - Errors - Default
      w - Warnings
      b - Both Errors and Warnings
      g - Good
      a - All output (includes Good)
  -i - One server; just report information for a single server
  -r - All servers in a Project; enclose multi-word searches in quotes
  -p - All servers in a Product; enclose multi-word searches in quotes
  -s - Search; enclose multi-word searches in quotes
EOF
}

if [[ -z $1 ]]
then
  usage
  exit 1
fi

if [[ $1 = '-p' ]] && [[ -z $2 ]]
then
  echo "List of Products:"
  for i in `grep -v "^#" $ADMIN/etc/servers | cut -f8 -d: | sort | uniq`
  do
    echo "./chkstatus -p $i"
  done
  exit 1
fi

if [[ $1 = '-r' ]] && [[ -z $2 ]]
then
  echo "List of Projects:"
  for i in `grep -v "^#" $ADMIN/etc/servers | cut -f9 -d: | sort | uniq`
  do
    echo "./chkstatus -r $i"
  done
  exit 1
fi

while getopts dht:i:r:p:s: optchar
do
  case $optchar in
    d) DEBUG='yes'
      ;;
    h) usage
       exit 1
      ;;
    t) case $OPTARG in
         a) GREP="(31m|32m|33m)"
            ERROR="(Must be corrected due to vulnerability or system stability issue|Setting should be reviewed and corrected if appropriate|Test or value was successful)"
            ;;
         b) GREP="(31m|33m)"
            ERROR="(Must be corrected due to vulnerability or system stability issue|Setting should be reviewed and corrected if appropriate)"
            ;;
         e) GREP="31m"
            ERROR="Must be corrected due to vulnerability or system stability issue"
            ;;
         w) GREP="33m"
            ERROR="Setting should be reviewed and corrected if appropriate"
            ;;
         g) GREP="32m"
            ERROR="Test or value was successful"
            ;;
       esac
      ;;
    i) SERVER=$OPTARG
       ;;
    r) PROJECT=`echo $OPTARG | sed -e "s/ /_/g"`
       ;;
    p) PRODUCT=`echo $OPTARG | sed -e "s/ /_/g"`
       ;;
    s) FILTER="(${OPTARG})"
       ;;
    *) usage
       exit 1
       ;;
  esac
done

USER=0
GROUP=0
AGENT=0
FIREWALL=0
TIME=0
SUBMGR=0
CONFIG=0
KUBE=0

DEBUGFILTER="("

UserText[0]="Users who don't have logins: "
UserRegx[0]="does not have a login on this system"
UserText[1]="Users who shouldn't have privileged access: "
UserRegx[1]="undocumented privileged access"
UserText[2]="Users who should be locked: "
UserRegx[2]="and the account isn't locked"
UserText[3]="Nessus InfoSec account not found: "
UserRegx[3]="Unable to locate nessus"
UserText[4]="nessus account expires: "
UserRegx[4]="Account expires.*nessus"
UserText[5]="unixsvc account expires: "
UserRegx[5]="Account expires.*unixsvc"
UserText[6]="User not present: "
UserRegx[6]="Unable to locate.*in /etc/passwd"
UserText[7]="nessus password expires: "
UserRegx[7]="Password expires.*nessus"
UserText[8]="opc_op password expires: "
UserRegx[8]="Password expires.*opc_op"
UserText[9]="unixsvc password expires: "
UserRegx[9]="Password expires.*unixsvc"
UserText[10]="Still set to default password: "
UserRegx[10]="password is still set to the default"
UserText[11]="Expired privileged access: "
UserRegx[11]="access which expired"
UserText[12]="Service account password must be changed: "
UserRegx[12]="Password must be changed"
UserText[13]="oracle password expires: "
UserRegx[13]="Password expires.*oracle"
UserText[14]="arad password expires: "
UserRegx[14]="Password expires.*arad"
UserText[15]="root account expires: "
UserRegx[15]="Account expires.*root"
UserText[16]="root password expires: "
UserRegx[16]="Password expires.*root"

Pipe=""
for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
do
  DEBUGFILTER="${DEBUGFILTER}${Pipe}${UserRegx[$i]}"
  Pipe="|"
done

# errors

GroupText[0]="Users who should be in sysadmin group: "
GroupRegx[0]="was not found in the sysadmin"
GroupText[1]="Users who shouldn't be in sysadmin group: "
GroupRegx[1]="was found in the sysadmin group"
GroupText[2]="Users who should be in dbadmins group: "
GroupRegx[2]="was not found in the dbadmins"
GroupText[3]="Users who shouldn't be in dbadmins group: "
GroupRegx[3]="was found in the dbadmins group"
GroupText[4]="Users who should be in webapps group: "
GroupRegx[4]="was not found in the webapps"
GroupText[5]="Users who shouldn't be in webapps group: "
GroupRegx[5]="was found in the webapps group"
GroupText[6]="Users who should be in monadmin group: "
GroupRegx[6]="was not found in the monadmin"
GroupText[7]="Users who shouldn't be in monadmin group: "
GroupRegx[7]="was found in the monadmin group"
GroupText[8]="Users who should be in vnsadmin group: "
GroupRegx[8]="was not found in the vnsadmin"
GroupText[9]="Users who shouldn't be in vnsadmin group: "
GroupRegx[9]="was found in the vnsadmin group"
GroupText[10]="Users who should be in mobadmin group: "
GroupRegx[10]="was not found in the mobadmin"
GroupText[11]="Users who shouldn't be in mobadmin group: "
GroupRegx[11]="was found in the mobadmin group"
GroupText[12]="Expected group is not present: "
GroupRegx[12]="Unable to locate.*in /etc/group"
GroupText[13]="Non-standard group found: "
GroupRegx[13]="is a non-standard group"
GroupText[14]="Users who should be in dbadmin group: "
GroupRegx[14]="was not found in the dbadmin group"
GroupText[15]="Users who shouldn't be in dbadmin group: "
GroupRegx[15]="was found in the dbadmin group"
GroupText[16]="Users who should be in dba group: "
GroupRegx[16]="was not found in the dba group"
GroupText[17]="Users who shouldn't be in dba group: "
GroupRegx[17]="was found in the dba group"
GroupText[18]="Users who should be in monadm group: "
GroupRegx[18]="was not found in the monadm group"
GroupText[19]="Users who shouldn't be in monadm group: "
GroupRegx[19]="was found in the monadm group"
GroupText[20]="Users who should be in uxadmins group: "
GroupRegx[20]="was not found in the uxadmins group"
GroupText[21]="Users who shouldn't be in uxadmins group: "
GroupRegx[21]="was found in the uxadmins group"
GroupText[22]="Unable to locate group: "
GroupRegx[22]="Unable to locate.*group"
GroupText[23]="Unable to locate sudoers group: "
GroupRegx[23]="Unable to locate %.*in.*/sudoers"
GroupText[24]="Users who should be in webadmin group: "
GroupRegx[24]="was not found in the webadmin"
GroupText[25]="Users who shouldn't be in webadmin group: "
GroupRegx[25]="was found in the webadmin group"
GroupText[26]="Users who should be in alimadm group: "
GroupRegx[26]="was not found in the alimadm"
GroupText[27]="Users who shouldn't be in alimadm group: "
GroupRegx[27]="was found in the alimadm group"
GroupText[28]="Users who should be in fmccro group: "
GroupRegx[28]="was not found in the fmccro"
GroupText[29]="Users who shouldn't be in fmccro group: "
GroupRegx[29]="was found in the fmccro group"
GroupText[30]="Users who should be in fmccprov group: "
GroupRegx[30]="was not found in the fmccprov"
GroupText[31]="Users who shouldn't be in fmccprov group: "
GroupRegx[31]="was found in the fmccprov group"
GroupText[32]="Users who should be in fmccadm group: "
GroupRegx[32]="was not found in the fmccadm"
GroupText[33]="Users who shouldn't be in fmccadm group: "
GroupRegx[33]="was found in the fmccadm group"
GroupText[34]="Users who should be in isuptadm group: "
GroupRegx[34]="was not found in the isuptadm"
GroupText[35]="Users who shouldn't be in isuptadm group: "
GroupRegx[35]="was found in the isuptadm group"
GroupText[36]="Users who should be in isuptprov group: "
GroupRegx[36]="was not found in the isuptprov"
GroupText[37]="Users who shouldn't be in isuptprov group: "
GroupRegx[37]="was found in the isuptprov group"

# warnings
GroupText[38]="Sudoers group missing from /etc/group: "
GroupRegx[38]="sudoers group.*doesn't exist in /etc/group"

for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
do
  DEBUGFILTER="${DEBUGFILTER}|${GroupRegx[$i]}"
done

#errors
OpenViewText[0]="OpenView installed but not running: "
OpenViewRegx[0]="OpenView agent is not running"
OpenViewText[1]="OpenView should be installed but is not: "
OpenViewRegx[1]="OpenView is not installed"
OpenViewText[2]="Server has no Openview Certificates: "
OpenViewRegx[2]="No Certificates found."
OpenViewText[3]="Longmont monitoring site not pingable: "
OpenViewRegx[3]="Monitoring site lnmtcodcom1vip.*pingable"
OpenViewText[4]="Miami monitoring site not pingable: "
OpenViewRegx[4]="Monitoring site miamfldcom1vip.*is not pingable"
OpenViewText[5]="Longmont monitoring site port is not accessible: "
OpenViewRegx[5]="Monitoring site lnmtcodcom1vip.*is not accessible"
OpenViewText[6]="Miami monitoring site port not accessible: "
OpenViewRegx[6]="Monitoring site miamfldcom1vip.*is not accessible"
OpenViewText[7]="bbcutil is unable to ping Longmont: "
OpenViewRegx[7]="bbcutil is unable to ping lnmtcodcom1vip.scc911.com"
OpenViewText[8]="bbcutil is unable to ping Miami:"
OpenViewRegx[8]="bbcutil is unable to ping miamfldcom1vip.scc911.com"
OpenViewText[9]="bbcutil is unable to ping Longmont: "
OpenViewRegx[9]="bbcutil is unable to ping Longmont"
OpenViewText[10]="bbcutil is unable to ping Miami:"
OpenViewRegx[10]="bbcutil is unable to ping Miami"
OpenViewText[11]="Openview reports Aborted processes:"
OpenViewRegx[11]="Openview agent is running: Aborted:"
OpenViewText[12]="Failed to contact Openview servers: "
OpenViewRegx[12]="Unable to contact Certificate Client."
OpenViewText[13]="Openview denied certificate request: "
OpenViewRegx[13]="Certificate request was denied."
OpenViewText[14]="Openview certificate request is in the queue: "
OpenViewRegx[14]="Certificate request is pending."
OpenViewText[15]="Unable to locate server in Inventory listing: "
OpenViewRegx[15]="Unable to locate.*in chkserver.input file to verify Route Configuration"
OpenViewText[16]="Misconfigured bbc.http: "
OpenViewRegx[16]="Configuration: bbc.http.CLIENT_BIND_ADDR=.*is not"
OpenViewText[17]="Misconfigured bbc.http: "
OpenViewRegx[17]="Configuration: bbc.http.SERVER_BIND_ADDR=.*is not"
OpenViewText[18]="Misconfigured eaagt: "
OpenViewRegx[18]="Configuration: eaagt OPC_IP_ADDRESS=.*is not"
OpenViewText[19]="Misconfigured eaagt: "
OpenViewRegx[19]="Configuration: eaagt OPC_MGMT_SERVER=.*is not"
OpenViewText[20]="Misconfigured eaagt: "
OpenViewRegx[20]="Configuration: eaagt OPC_PRIMARY_MGR=.*is not"
OpenViewText[21]="Misconfigured sec.cm.client: "
OpenViewRegx[21]="Configuration: sec.cm.client CERTIFICATE_SERVER=.*is not"
OpenViewText[22]="Misconfigured sec.core.auth: "
OpenViewRegx[22]="Configuration: sec.core.auth MANAGER=.*is not"
OpenViewText[23]="Misconfigured bbc.cb: "
OpenViewRegx[23]="Configuration: bbc.cb SERVER_BIND_ADDR=.*is not"
OpenViewText[24]="Certificate status is blank: "
OpenViewRegx[24]="Uncaught error:  "
OpenViewText[25]="Unable to locate server in Inventory listing: "
OpenViewRegx[25]="Unable to locate.*in chkserver.input file to verify Openview Configuration"
OpenViewText[26]="Missing openview policies: "
OpenViewRegx[26]="Openview reports no installed policies"
OpenViewText[27]="Unable to ping Longmont OpsBridge site: "
OpenViewRegx[27]="hpomilnmtdatavip.*is not pingable"
OpenViewText[28]="Unable to access port on Longmont OpsBridge site: "
OpenViewRegx[28]="hpomilnmtdatavip.*is not accessible"
OpenViewText[29]="Unable to ping Miami OpsBridge site: "
OpenViewRegx[29]="hpomimiamdatavip.*is not pingable"
OpenViewText[30]="Unable to access port on Miami OpsBridge site: "
OpenViewRegx[30]="hpomimiamdatavip.*is not accessible"
OpenViewText[31]="Unable to ping OpsBridge 10.32.134.9 VIP: "
OpenViewRegx[31]="omiagenttraffic.*10.32.134.9 is not pingable"
OpenViewText[32]="Unable to access port on OpsBridge 10.32.134.9 VIP: "
OpenViewRegx[32]="omiagenttraffic.*10.32.134.9:383 is not accessible"
OpenViewText[33]="Unable to ping OpsBridge 10.32.6.9 VIP: "
OpenViewRegx[33]="omiagenttraffic.*10.32.6.9 is not pingable"
OpenViewText[34]="Unable to access port on OpsBridge 10.32.6.9 VIP: "
OpenViewRegx[34]="omiagenttraffic.*10.32.6.9:383 is not accessible"
OpenViewText[35]="bbcutil is unable to ping Longmont OpsBridge site: "
OpenViewRegx[35]="bbcutil is unable to ping hpomilnmtdatavip"
OpenViewText[36]="bbcutil is unable to ping Miami OpsBridge site: "
OpenViewRegx[36]="bbcutil is unable to ping hpomimiamdatavip"
OpenViewText[37]="bbcutil is unable to ping Longmont OpsBridge VIP: "
OpenViewRegx[37]="bbcutil is unable to ping omiagenttraffic.*10.32.134.9"
OpenViewText[38]="bbcutil is unable to ping Miami OpsBridge VIP: "
OpenViewRegx[38]="bbcutil is unable to ping omiagenttraffic.*10.32.6.9"
OpenViewText[39]="Unable to ping OpsBridge IP: "
OpenViewRegx[39]="lnmt1dwasobprb3.*not pingable"


# warnings
OpenViewText[40]="Management Route is not set: "
OpenViewRegx[40]="Route to.*missing."
OpenViewText[41]="The Openview agent is configured to not start: "
OpenViewRegx[41]="The Openview agent is configured to not start"
OpenViewText[42]="Test message sent today:"
OpenViewRegx[42]="Sent a Minor test message to the Unix"

for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
do
  DEBUGFILTER="${DEBUGFILTER}|${OpenViewRegx[$i]}"
done


NetBackupText[0]="NetBackup installed but not running: "
NetBackupRegx[0]="NetBackup is not running"
NetBackupText[1]="Backup log file is empty: "
NetBackupRegx[1]="backups.output is empty"
NetBackupText[2]="NetBackup should be installed but is not: "
NetBackupRegx[2]="NetBackup is not installed"
NetBackupText[3]="NetBackup binary bpcd is not running: "
NetBackupRegx[3]="NetBackup bpcd is not running"
NetBackupText[4]="NetBackup binary vnetd is not running: "
NetBackupRegx[4]="NetBackup vnetd is not running"
NetBackupText[5]="Last backup was more than 7 days ago: "
NetBackupRegx[5]="Last backup was more than 7 days ago"
NetBackupText[6]="/etc/hosts.allow missing servers: "
NetBackupRegx[6]="is missing from the.*line in /etc/hosts.allow"
NetBackupText[7]="/etc/hosts.allow missing binaries: "
NetBackupRegx[7]="is missing from /etc/hosts.allow"
NetBackupText[8]="No /etc/hosts.allow file: "
NetBackupRegx[8]="/etc/hosts.allow is missing"
NetBackupText[9]="Longmont port is not accessible: "
NetBackupRegx[9]="10.100.6.25:1556 is not accessible"
NetBackupText[10]="Certificate check, Uncaught error:"
NetBackupRegx[10]="Uncaught error:"
NetBackupText[11]="Longmont port is not accessible:"
NetBackupRegx[11]="10.100.6.25:13724"
NetBackupText[12]="Longmont port is not accessible:"
NetBackupRegx[12]="10.32.138.14:1556"
NetBackupText[13]="Longmont port is not accessible:"
NetBackupRegx[13]="10.32.138.14:13724"
NetBackupText[14]="The Master server for this zone isn't first: "
NetBackupRegx[14]="The Master server.*is not the first SERVER entry"

NetBackupText[15]="The bp.conf file has no or an incorrect CLIENT_NAME: "
NetBackupRegx[15]="The CLIENT_NAME in /usr/openv/netbackup/bp.conf is"
NetBackupText[16]="The bp.conf file is missing SERVER lines: "
NetBackupRegx[16]="There is no.*entry in /usr/openv/netbackup/bp.con"

for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
do
  DEBUGFILTER="${DEBUGFILTER}|${NetBackupRegx[$i]}"
done


DataPaletteText[0]="Data Palette installed but not running: "
DataPaletteRegx[0]="Data Palette is not running"
DataPaletteText[1]="Unable to ping Data Palette Nerve Center: "
DataPaletteRegx[1]="Data Palette Nerve Center is not pingable"
DataPaletteText[2]="Unable to contact Data Palette Nerve Center: "
DataPaletteRegx[2]="Data Palette Nerve Center.*is not accessible"

for i in 0 1 2
do
  DEBUGFILTER="${DEBUGFILTER}|${DataPaletteRegx[$i]}"
done


# minor alerts (yellow)
CentrifyText[0]="Centrify should be installed but is not: "
CentrifyRegx[0]="Centrify is not installed"
CentrifyText[1]="Centrify agent is not running: "
CentrifyRegx[1]="Centrify is not running"

for i in 0 1
do
  DEBUGFILTER="${DEBUGFILTER}|${CentrifyRegx[$i]}"
done


OpnetText[0]="OpNet server lmh08-smp01 is not pingable: "
OpnetRegx[0]="OpNet Server lmh08-smp01.*is not pingable"
OpnetText[1]="OpNet server lmh08-smp02 is not pingable: "
OpnetRegx[1]="OpNet Server lmh08-smp02.*is not pingable"
OpnetText[2]="OpNet server lnmt1euasneon10 is not pingable: "
OpnetRegx[2]="OpNet Server lnmt1euasneon10.*is not pingable"

# minor alerts (yellow)
OpnetText[3]="Opnet should be installed but is not: "
OpnetRegx[3]="OpNet is not installed"
OpnetText[4]="OpNet agent is not running: "
OpnetRegx[4]="OpNet is not running"
OpnetText[5]="OpNet agent cannot reach Console: "
OpnetRegx[5]="OpNet Server.*is not accessible"

for i in 0 1 2 4 5
do
  DEBUGFILTER="${DEBUGFILTER}|${OpnetRegx[$i]}"
done


# minor alerts (yellow)
VMwareText[0]="VMWare agent is not running: "
VMwareRegx[0]="VMWare Agent is not running"
VMwareText[1]="VMWare agent is not installed: "
VMwareRegx[1]="VMWare Agent is not installed"

for i in 0 1
do
  DEBUGFILTER="${DEBUGFILTER}|${VMwareRegx[$i]}"
done


NagiosText[0]="Nagios Agent is not running: "
NagiosRegx[0]="The NRPE agent is not running"

for i in 0
do
  DEBUGFILTER="${DEBUGFILTER}|${NagiosRegx[$i]}"
done


KatelloText[0]="Katello Agent not installed: "
KatelloRegx[0]="Katello Agent RPM is not installed"
KatelloText[1]="Katello Certificate not installed: "
KatelloRegx[1]="Katello Certificate RPM is not installed"

for i in 0 1
do
  DEBUGFILTER="${DEBUGFILTER}|${KatelloRegx[$i]}"
done


FirewallText[0]="Jumpstart server (10.100.78.143:80) is not accessible: "
FirewallRegx[0]="Jumpstart web server is not accessible"
FirewallText[1]="calgbuma01 Backup server (10.109.193.27:13724) is not accessible: "
FirewallRegx[1]="10.109.193.27:13724 is not accessible"
FirewallText[2]="calgbuma01 Backup server (10.109.193.27:1556) is not accessible: "
FirewallRegx[2]="10.109.193.27:1556 is not accessible"
FirewallText[3]="Unable to reach Mail server: "
FirewallRegx[3]="Email server.*is not"
FirewallText[4]="hnllhiecnbu10 Backup server (10.109.79.19:13724) is not accessible: "
FirewallRegx[4]="10.109.79.19:13724 is not accessible"
FirewallText[5]="hnllhiecnbu10 Backup server (10.109.79.19:1556) is not accessible: "
FirewallRegx[5]="10.109.79.19:1556 is not accessible"
FirewallText[6]="Unable to reach Longmont Openview server: "
FirewallRegx[6]="Longmont VIP is not"
FirewallText[7]="Unable to reach Miami Openview server: "
FirewallRegx[7]="Miami VIP is not"
FirewallText[8]="Unable to ping Longmont Openview VIP: "
FirewallRegx[8]="Longmont Openview VIP is not pingable"
FirewallText[9]="Unable to ping Miami Openview VIP: "
FirewallRegx[9]="Miami Openview VIP is not pingable"
FirewallText[10]="Unable to use configured nameserver to resolve: "
FirewallRegx[10]="Unable to resolve"
FirewallText[11]="Unable to ping configured nameserver: "
FirewallRegx[11]="Nameserver.*is not pingable"
FirewallText[12]="Artifactory server is not pingable: "
FirewallRegx[12]="Artifactory Server.*is not pingable"
FirewallText[13]="Management server is not pingable: "
FirewallRegx[13]="Management server.*is not pingable"
FirewallText[14]="Management server port is not accessible: "
FirewallRegx[14]="Management server.*is not accessible"

FirewallText[15]="Artifactory server port is not accessible: "
FirewallRegx[15]="Artifactory Server.*is not accessible"

for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
do
  DEBUGFILTER="${DEBUGFILTER}|${FirewallRegx[$i]}"
done


#errors
TimeText[0]="Longmont GPS server not in configuration file: "
TimeRegx[0]="10.100.228.31 is not"
TimeText[1]="Longmont GPS server is not reachable: "
TimeRegx[1]="10.100.228.31:UDP/123 is not"
TimeText[2]="Miami GPS server not in configuration file: "
TimeRegx[2]="192.168.200.20 is not"
TimeText[3]="Miami GPS server is not reachable: "
TimeRegx[3]="192.168.200.20:UDP/123 is not"
TimeText[4]="Drift directory is missing: "
TimeRegx[4]="ntp drift path"
TimeText[5]="No configured time servers: "
TimeRegx[5]="No time servers installed"
TimeText[6]="ntp/chrony not running: "
TimeRegx[6]="Time service is not running."
TimeText[7]="Problem reliably connecting with a time server: "
TimeRegx[7]="GPS Server.*Reach is.*and should be 377."
TimeText[8]="Unable to query time server: "
TimeRegx[8]="Unable to determine Reach for GPS Server"
TimeText[9]="Reachability isn't 377: "
TimeRegx[9]="GPS Server.*Reachability.*is not 377"
TimeText[10]="Reachability is good but Status is not: "
TimeRegx[10]="GPS Server.*Reachability is good, but Status"
TimeText[11]="Unable to determine Reachability: "
TimeRegx[11]="Unable to determine Reachability"
TimeText[12]="The chronyd service is not enabled: "
TimeRegx[12]="chronyd is not enabled"
TimeText[13]="The ntpd service is not enabled: : "
TimeRegx[13]="ntpd is not enabled"

# warnings
TimeText[14]="ntp Drift File doesn't exist: "
TimeRegx[14]="ntp drift file.*does not exist."

for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
do
  DEBUGFILTER="${DEBUGFILTER}|${TimeRegx[$i]}"
done

# errors
SubMgrText[0]="Red Hat Subscription Manager not installed: "
SubMgrRegx[0]="Subscription-Manager not installed"
SubMgrText[1]="System is not subscribed to Satellite: "
SubMgrRegx[1]="System is not subscribed to Satellite"
SubMgrText[2]="Unable to access designated Sattelite port: "
SubMgrRegx[2]="Satellite Server.*is not accessible"
SubMgrText[3]="Unable to reach Satellite Server: "
SubMgrRegx[3]="Satellite Server.*is not pingable"

# warning
SubMgrText[4]="System subscription has expired: "
SubMgrRegx[4]="System subscription has expired"

for i in 0 1 2 3 4
do
  DEBUGFILTER="${DEBUGFILTER}|${SubMgrRegx[$i]}"
done


# errors
ConfigText[0]="Configuration mismatch, Memory: "
ConfigRegx[0]="System shows.*where expected is"
ConfigText[1]="Configuration mismatch, IP Addresses: "
ConfigRegx[1]="Unable to locate.*in ip addr output"
ConfigText[2]="Configuration mismatch, Gateways: "
ConfigRegx[2]="Gateway.*is not responding to ping"
ConfigText[3]="Messages file is not current: "
ConfigRegx[3]="has no log entries for today"
ConfigText[4]="Too many name server entries: "
ConfigRegx[4]="More than 3 nameserver entries"
ConfigText[5]="RemoveIPC still set to no: "
ConfigRegx[5]="Set RemoveIPC to no"
ConfigText[6]="Route table doesn't match live routes: "
ConfigRegx[6]="Route table mismatch."
ConfigText[7]="sudo not installed: "
ConfigRegx[7]="sudoers file not found"
ConfigText[8]="sudo rules missing: "
ConfigRegx[8]="Update sudoers to add the.*rule."
ConfigText[9]="sudo rules missing: "
ConfigRegx[9]="Update sudoers to add the.*rule."
ConfigText[10]="User not allowed to use cron: "
ConfigRegx[10]="is not allowed to use cron"
ConfigText[11]="cfg2html has not been run: "
ConfigRegx[11]="cfg2html has not been run"
ConfigText[12]="Interface won't start on boot: "
ConfigRegx[12]="is not configured to start on boot"
ConfigText[13]="Gateway not found: "
ConfigRegx[13]="interface gateways were found"
ConfigText[14]="Disk Suite problem identified by metadb: "
ConfigRegx[14]="Disk Suite metadb error on"
ConfigText[15]="Interface failed: "
ConfigRegx[15]="Failed Interface found."
ConfigText[16]="sudoers file not found: "
ConfigRegx[16]="Unable to locate sudoers file."
ConfigText[17]="No nameserver entries in resolv.conf: "
ConfigRegx[17]="No nameserver entries found in /etc/resolv.conf"
ConfigText[18]="SELinux Active and Enforcing: "
ConfigRegx[18]="selinux is in Enforcing mode"
ConfigText[19]="Techops installation scripts exist: "
ConfigRegx[19]="/opt/techops.*directory still exists"
ConfigText[20]="Disk Space is critical: "
ConfigRegx[20]="has reached or exceeded 95"
ConfigText[21]="Out of memory errors: "
ConfigRegx[21]="Found oom-killer messages"
ConfigText[22]="Group found in sudoers but not /etc/group: "
ConfigRegx[22]="sudoers group.*doesn't exist"
ConfigText[23]="Ctrl-Alt-Del is enabled: "
ConfigRegx[23]="Ctrl-Alt-Del is enabled"
ConfigText[24]="Ctrl-Alt-Del target is not masked: "
ConfigRegx[24]="Ctrl-Alt-Del target is not masked"
ConfigText[25]="Remote root access via ssh is permitted: "
ConfigRegx[25]="Remote root access via ssh is permitted"
ConfigText[26]="Disk Suite metastat error: "
ConfigRegx[26]="Disk Suite metastat error"
ConfigText[27]="chkserver Input file hasn't been installed: "
ConfigRegx[27]="chkserver.input file not found"
ConfigText[28]="Ctrl-Alt-Del target is enabled: "
ConfigRegx[28]="Ctrl-Alt-Del target is enabled"
ConfigText[29]="Crash dump files exist: "
ConfigRegx[29]="Crash dump files exist"
ConfigText[30]="Routes incorrectly configured: "
ConfigRegx[30]="/etc/rc.config.d/netconf has defined "
ConfigText[31]="Routes incorrectly configured: "
ConfigRegx[31]="/etc/rc.config.d/netconf indicates there are "
ConfigText[32]="eeprom not set to true: "
ConfigRegx[32]="Sun system is not configured to automatically start on boot"
ConfigText[33]="System IP isn't resolving correctly: "
ConfigRegx[33]="doesn't resolve to.*in DNS"
ConfigText[34]="System hostname isn't resolving correctly: "
ConfigRegx[34]="unable to be found in DNS."
ConfigText[35]="chkov is commented out: "
ConfigRegx[35]="The Openview restart script is not active in root's cron"
ConfigText[36]="Static route found but it's not saved: "
ConfigRegx[36]="Route missing from /etc/sysconfig/network-scripts"
ConfigText[37]="Multiple defunct processes found: "
ConfigRegx[37]="There are.*processes"
ConfigText[38]="Mandatory program is not configured to start on boot: "
ConfigRegx[38]="wildfly is not enabled"
ConfigText[39]="Mandatory program is not running: "
ConfigRegx[39]="wildfly is not running"
ConfigText[40]="The review file doesn't exist: "
ConfigRegx[40]=".*review file doesn't exist"
ConfigText[41]="The comparison check hasn't been verified yet: "
ConfigRegx[41]=".*.valid file doesn't exist"
ConfigText[42]="The comparison file indicates changes to be reviewed: "
ConfigRegx[42]=".*.diff is indicating changes have occurred"
ConfigText[43]="Drive failure discovered: "
ConfigRegx[43]="Failed drives found"
ConfigText[44]="Failing drives found: "
ConfigRegx[44]="Stale.*drives found"
ConfigText[45]="Possible drive swap occurred: "
ConfigRegx[45]="Data found on spare drive"
ConfigText[46]="Static route file incorrectly set: "
ConfigRegx[46]="line 'dev' is incorrect:"
ConfigText[47]="The intrado script is disabled: "
ConfigRegx[47]="The intrado script is disabled in root's cron"
ConfigText[48]="RRDTool issue: "
ConfigRegx[48]="Multiple copies of.*are running."
ConfigText[49]="Static route file incorrectly set: "
ConfigRegx[49]="line 'via' is incorrect:"

# warnings
ConfigText[50]="Misconfigured Swap: "
ConfigRegx[50]="Gig which is less than Memory which is "
ConfigText[51]="Misconfigured Swap: "
ConfigRegx[51]="Memory is.*but Swap is.*Gig."
ConfigText[52]="cfg2html is not installed yet: "
ConfigRegx[52]="cfg2html not installed"
ConfigText[53]="Number of spares is not 4: "
ConfigRegx[53]="Incorrect number of spares found"
ConfigText[54]="rrdtool is not installed yet: "
ConfigRegx[54]="rrdtool is not configured or.*is not running"
ConfigText[55]="/etc/sudoers doesn't have the hostname alias: "
ConfigRegx[55]="/etc/sudoers doesn't contain"
ConfigText[56]="SELinux Active and Permissive: "
ConfigRegx[56]="selinux is in Permissive mode"
ConfigText[57]="Disk Space is major: "
ConfigRegx[57]="has reached or exceeded 85"
ConfigText[58]="Unnecessary static route: "
ConfigRegx[58]="default gateway so the route probably isn't needed"
ConfigText[59]="Intrado script hasn't run: "
ConfigRegx[59]="The /opt/intrado/bin/intrado script hasn't run yet."
ConfigText[60]="Missing IP or Hostname in /etc/hosts: "
ConfigRegx[60]="not in /etc/hosts"

for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
do
  DEBUGFILTER="${DEBUGFILTER}|${ConfigRegx[$i]}"
done


KubeText[0]="Container failure: "
KubeRegx[0]="Container.*has failed"
KubeText[1]="A namespace is reporting errors: "
KubeRegx[1]="Namespace.*is reporting errors:"
KubeText[2]="Node is not Ready: "
KubeRegx[2]="Node.*is currently not in Ready state"
KubeText[3]="etcd back end is not healthy: "
KubeRegx[3]="etcd cluster is not healthy"
KubeText[4]="Unable to query the API Server: "
KubeRegx[4]="apiserver VIP query failed"

# warnings
KubeText[5]="Unable to use curl to access the local api server: "
KubeRegx[5]="Local apiserver query failed"

for i in 0 1 2 3 4 5
do
  DEBUGFILTER="${DEBUGFILTER}|${KubeRegx[$i]}"
done


DEBUGFILTER="${DEBUGFILTER})"


ADMIN=/usr/local/admin

if [[ -f ${ADMIN}/logs/chkstatus.log ]]
then
  rm ${ADMIN}/logs/chkstatus.log
  touch ${ADMIN}/logs/chkstatus.log
fi

if [[ ! -z ${FILTER} ]]
then
    echo "Filtering on: ${FILTER}"
fi

if [[ ! -z ${SERVER} ]]
then
  SERVERLIST=`grep -v "^#" ${ADMIN}/etc/servers | egrep -i "${SERVER}" | cut -f1 -d:`
  SERVERTOTAL=`egrep -i "${SERVER}" ${ADMIN}/etc/servers | grep -vc "^#"`
else
  if [[ ! -z ${PRODUCT} ]]
  then
    SERVERLIST=`grep -v "^#" ${ADMIN}/etc/servers | egrep -i ":.*${PRODUCT}.*:" | cut -f1 -d:`
    SERVERTOTAL=`egrep -i ":.*${PRODUCT}.*:" ${ADMIN}/etc/servers | grep -vc "^#"`
  else
    if [[ ! -z ${PROJECT} ]]
    then
      SERVERLIST=`grep -v "^#" ${ADMIN}/etc/servers | egrep -i ":.*${PROJECT}.*$" | cut -f1 -d:`
      SERVERTOTAL=`grep -i ":.*${PROJECT}.*$" ${ADMIN}/etc/servers | grep -vc "^#"`
    else
      SERVERLIST=`grep -v "^#" ${ADMIN}/etc/servers | cut -f1 -d:`
      SERVERTOTAL=`grep -vc "^#" ${ADMIN}/etc/servers`
    fi
  fi
fi

if [[ -z ${SERVERLIST} ]]
then
  echo "Server(s) not found."
  exit 1
fi

for i in ${SERVERLIST}
do
  if [[ -f ${ADMIN}/servers/${i}/chkserver.output ]]
  then
    if [[ -z ${FILTER} ]]
    then
      echo ${i} >> $ADMIN/logs/chkstatus.log
      if [[ ${DEBUG} = 'yes' ]]
      then
        egrep "${GREP}" ${ADMIN}/servers/${i}/chkserver.output | egrep -v "${ERROR}" | egrep -v "${DEBUGFILTER}" >> $ADMIN/logs/chkstatus.log
      else
        egrep "${GREP}" ${ADMIN}/servers/${i}/chkserver.output | egrep -v "${ERROR}" >> $ADMIN/logs/chkstatus.log
      fi
    else
      egrep "${GREP}" ${ADMIN}/servers/${i}/chkserver.output | egrep -v "${ERROR}" | egrep -i "${FILTER}" > /dev/null
      if [[ $? = 0 ]]
      then
        echo ${i} >> $ADMIN/logs/chkstatus.log
        egrep "${GREP}" ${ADMIN}/servers/${i}/chkserver.output | egrep -v "${ERROR}" | egrep -i "${FILTER}" >> $ADMIN/logs/chkstatus.log
      fi
    fi
    SERVERTOTAL=$(( $SERVERTOTAL - 1 ))
    printf "%s," $SERVERTOTAL

# check for complete script runs
    grep "^+++chkserver script run completed" ${ADMIN}/servers/${i}/chkserver.output > /dev/null
    if [[ $? -ne 0 ]]
    then
      INCOMPLETE="${INCOMPLETE} $i"
      INCOUNT=$(( $INCOUNT + 1 ))
    fi

  else
# number of servers where no output was generated
    NOSERVER="$NOSERVER $i"
    COUNT=$(( $COUNT + 1 ))
  fi
done

echo ""
echo ""

if [[ $DEBUG = 'yes' ]]
then
  cat $ADMIN/logs/chkstatus.log | egrep ${GREP} | sort | uniq
else
  cat $ADMIN/logs/chkstatus.log
fi

if [[ $DEBUG = 'no' ]] && [[ $GREP = '31m' ]] || [[ $GREP = '(31m|33m)' ]]
then
  echo ""
  echo "User Issues:"
  for j in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
  do
    CountValue=`grep -c "${UserRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${UserText[$j]}" "${CountValue}" "./chkstatus -s '${UserRegx[$j]}'"
    fi
  done

  echo ""
  echo "Group Issues:"
  for j in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37
  do
    CountValue=`grep -c "${GroupRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${GroupText[$j]}" "${CountValue}" "./chkstatus -s '${GroupRegx[$j]}'"
    fi
  done

  echo ""
  echo "OpenView Agent Issues:"
  for j in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 
  do
    CountValue=`grep -c "${OpenViewRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${OpenViewText[$j]}" "${CountValue}" "./chkstatus -s '${OpenViewRegx[$j]}'"
    fi
  done

  echo ""
  echo "Netbackup Agent Issues:"
  for j in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
  do
    CountValue=`grep -c "${NetBackupRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${NetBackupText[$j]}" "${CountValue}" "./chkstatus -s '${NetBackupRegx[$j]}'"
    fi
  done


  echo ""
  echo "Opnet Agent Issues:"
  for j in 0 1 2
  do
    CountValue=`grep -c "${OpnetRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${OpnetText[$j]}" "${CountValue}" "./chkstatus -t w -s '${OpnetRegx[$j]}'"
    fi
  done


  echo ""
  echo "Data Palette Issues:"
  for j in 0 1 2
  do
    CountValue=`grep -c "${DataPaletteRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${DataPaletteText[$j]}" "${CountValue}" "./chkstatus -s '${DataPaletteRegx[$j]}'"
    fi
  done


  echo ""
  echo "Nagios Issues:"
  for j in 0
  do
    CountValue=`grep -c "${NagiosRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${NagiosText[$j]}" "${CountValue}" "./chkstatus -s '${NagiosRegx[$j]}'"
    fi
  done


  echo ""
  echo "Ketello Issues:"
  for j in 0 1
  do
    CountValue=`grep -c "${KatelloRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${KatelloText[$j]}" "${CountValue}" "./chkstatus -s '${KatelloRegx[$j]}'"
    fi
  done


  echo ""
  echo "Firewall Issues:"
  for j in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
  do
    CountValue=`grep -c "${FirewallRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${FirewallText[$j]}" "${CountValue}" "./chkstatus -s '${FirewallRegx[$j]}'"
    fi
  done

  echo ""
  echo "Time Issues:"
  for j in 0 1 2 3 4 5 6 7 8 9 10 11 12 13
  do
    CountValue=`grep -c "${TimeRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${TimeText[$j]}" "${CountValue}" "./chkstatus -s '${TimeRegx[$j]}'"
    fi
  done

  echo ""
  echo "Red Hat Issues:"
  for j in 0 1 2 3
  do
    CountValue=`grep -c "${SubMgrRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${SubMgrText[$j]}" "${CountValue}" "./chkstatus -s '${SubMgrRegx[$j]}'"
    fi
  done

  echo ""
  echo "Configuration Issues:"
  for j in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
  do
    CountValue=`grep -c "${ConfigRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${ConfigText[$j]}" "${CountValue}" "./chkstatus -s '${ConfigRegx[$j]}'"
    fi
  done

  echo ""
  echo "Kubernetes/Container Issues:"
  for j in 0 1 2 3 4 
  do
    CountValue=`grep -c "${KubeRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${KubeText[$j]}" "${CountValue}" "./chkstatus -s '${KubeRegx[$j]}'"
    fi
  done

  echo ""
fi


if [[ $DEBUG = 'no' ]] && [[ $GREP = '33m' ]] || [[ $GREP = "(31m|33m)" ]]
then
  echo ""
  echo "User Issues:"
  echo ""
#  for j in 15
#  do
#    CountValue=`grep -c "${UserRegx[$j]}" $ADMIN/logs/chkstatus.log`
#    if [[ $CountValue -gt 0 ]]
#    then
#      printf "%75s %4d %30s\n" "${UserText[$j]}" "${CountValue}" "./chkstatus ${UserRegx[$j]}"
#    fi
#  done

  echo "Group Issues:"
  for j in 38
  do
    CountValue=`grep -c "${GroupRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${GroupText[$j]}" "${CountValue}" "./chkstatus -t w -s '${GroupRegx[$j]}'"
    fi
  done

  echo ""
  echo "OpenView Agent Issues:"
  for j in 40 41 42
  do
    CountValue=`grep -c "${OpenViewRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${OpenViewText[$j]}" "${CountValue}" "./chkstatus -t w -s '${OpenViewRegx[$j]}'"
    fi
  done


  echo ""
  echo "Netbackup Issues:"
  for j in 15 16
  do
    CountValue=`grep -c "${NetBackupRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${NetBackupText[$j]}" "${CountValue}" "./chkstatus -t w -s '${NetBackupRegx[$j]}'"
    fi
  done


  echo ""
  echo "Centrify Issues:"
  for j in 01
  do
    CountValue=`grep -c "${CentrifyRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${CentrifyText[$j]}" "${CountValue}" "./chkstatus -t w -s '${CentrifyRegx[$j]}'"
    fi
  done


  echo ""
  echo "Opnet Agent Issues:"
  for j in 3 4 5
  do
    CountValue=`grep -c "${OpnetRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${OpnetText[$j]}" "${CountValue}" "./chkstatus -t w -s '${OpnetRegx[$j]}'"
    fi
  done


  echo ""
  echo "VMware Issues:"
  for j in 0 1
  do
    CountValue=`grep -c "${VMwareRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${VMwareText[$j]}" "${CountValue}" "./chkstatus -t w -s '${VMwareRegx[$j]}'"
    fi
  done


  echo ""
  echo "Firewall Issues:"
  for j in 15
  do
    CountValue=`grep -c "${FirewallRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${FirewallText[$j]}" "${CountValue}" "./chkstatus -t w -s '${FirewallRegx[$j]}'"
    fi
  done

  echo ""
  echo "Time Issues:"
  for j in 14
  do
    CountValue=`grep -c "${TimeRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${TimeText[$j]}" "${CountValue}" "./chkstatus -t w -s '${TimeRegx[$j]}'"
    fi
  done

  echo ""
  echo "Red Hat Issues:"
  for j in 4
  do
    CountValue=`grep -c "${SubMgrRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${SubMgrText[$j]}" "${CountValue}" "./chkstatus -t w -s '${SubMgrRegx[$j]}'"
    fi
  done

  echo ""
  echo "Configuration Issues:"
  for j in 50 51 52 53 54 55 56 57 58 59 60
  do
    CountValue=`grep -c "${ConfigRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${ConfigText[$j]}" "${CountValue}" "./chkstatus -t w -s '${ConfigRegx[$j]}'"
    fi
  done

  echo ""
  echo "Kubernetes/Container Issues:"
  for j in 5
  do
    CountValue=`grep -c "${KubeRegx[$j]}" $ADMIN/logs/chkstatus.log`
    if [[ $CountValue -gt 0 ]]
    then
      printf "%75s %4d %30s\n" "${KubeText[$j]}" "${CountValue}" "./chkstatus -t w -s '${KubeRegx[$j]}'"
    fi
  done

  echo ""
fi

echo "Total Issues: `egrep -c ${GREP} $ADMIN/logs/chkstatus.log`"
echo "Servers with no chkserver.output file: $COUNT ($NOSERVER)"
echo "Servers with incomplete chkserver.output files: $INCOUNT ($INCOMPLETE)"

exit 0

