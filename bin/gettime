#!/bin/ksh

# gettime - Retrieve the output of ntpq -p or chrony status to ensure time is properly set
# getntp - Retrieve the output of ntpq -p to ensure ntp is properly working
# Owner: Carl Schelin
# 02/23/2010 - Changed LOCAL to 127.127.1.0
# 05/19/2016 - Renamed to gettime due to red hat 7 using chrony vs ntp

BASENAME=$(basename "$0")
DIRNAME=$(dirname "$0")

if [[ ! -f ${DIRNAME}/../.config ]]
then
  echo "Unable to locate ${DIRNAME}/../.config. Exiting."
  exit 1
fi

# Source the configuration file
. "${DIRNAME}"/../.config

if [[ ! ${RUNBY} -eq 5000 ]]
then
  echo "This script must be run by the Unix Service account."
  exit 0
fi

PROGNAME="gettime"

GPSNTP1="10.100.228.31"
GPSNTP2="192.168.200.20"

for i in `grep -v "^#" ${ADMIN_DATA}/servers`
do
  SERVER=`echo $i|cut -f1 -d:`
  OS=`echo $i|cut -f3 -d:`

  echo $SERVER
# Check to make sure the target directory exists
# if not, create it and set the perms

  SVRPATH="${ADMIN}/servers/$SERVER"

  if [ ! -d $SVRPATH ]
  then
    mkdir $SVRPATH
    chmod 775 $SVRPATH
  fi

  TIMEOUT=80

# Content here: scp the config file from here

  CONTENT="chktime"

  if [ -f $SVRPATH/$CONTENT.output ]
  then
    rm $SVRPATH/$CONTENT.output
  fi

  /usr/bin/scp $SERVER:${SCRIPTS_LOGS}/$CONTENT.output $SVRPATH/$CONTENT.output &
  PID=$!

# wait for the specified number of seconds for ssh to complete
# if the timeout is exceeded, kill the process and move on to the next box

# .2 seems to pause enough for the scp command to finish without taking a full second for each system.
  /usr/bin/perl -e 'select(undef,undef,undef,.2)'
  /usr/bin/ps -p $PID > /dev/null 2>&1
  if [[ $? -eq 0 ]]
  then
    while [[ $TIMEOUT -gt 0 ]]
    do
      /usr/bin/ps -p $PID > /dev/null 2>&1
      if [[ $? -ne 0 ]]
      then
        break
      fi
      TIMEOUT=$(($TIMEOUT - 1))
      sleep 1
    done

# if the timeout reaches 0, then the process was killed. Report something.

    if [[ $TIMEOUT -le 0 ]]
    then
      echo "ERROR: Unable to connect to server ($PROGNAME)" >> $SVRPATH/config.status
      echo "ERROR: Unable to connect to server ($PROGNAME)" >> $SVRPATH/morning.status
      chmod 664 $SVRPATH/config.status
      chmod 664 $SVRPATH/morning.status
      kill -KILL $PID
    fi
  fi

# if there's no output, delete the 0 byte file

  if [ ! -s $SVRPATH/$CONTENT.output ]
  then
    rm $SVRPATH/$CONTENT.output
  fi

# set the perms as the last step

  if [ -f $SVRPATH/$CONTENT.output ]
  then
    chmod 664 $SVRPATH/$CONTENT.output
  fi

# ntpq -np
#     remote           refid      st t when poll reach   delay   offset    disp
#==============================================================================
#*[TIMESOURCE1]   .GPS.            1 u   90 1024  377     0.29    0.002    0.06
#+[TIMESOURCE2]   .GPS.            1 u  654 1024  377    57.59   -1.207    0.23
# 127.127.1.0     127.127.1.0     10 u    -   64    0     0.00    0.000 16000.0

# chronyc -n sources
#210 Number of sources = 2
#MS Name/IP address         Stratum Poll Reach LastRx Last sample
#===============================================================================
#^* [TIMESOURCE1]                 1   9   377   162    +14us[  +20us] +/-  871us
#^- [TIMESOURCE2]                 1   9   377   286   +605us[ +611us] +/-   33ms

  COUNT=`/usr/bin/wc -l $SVRPATH/$CONTENT.output | /usr/bin/awk '{print $1}'`
  if [ -f $SVRPATH/$CONTENT.output ] && [ $COUNT -gt 1 ]
  then
    for j in `/usr/bin/egrep -v "(127.127.1.0|jitter|disp|Number of sources|IP address|==========)" $SVRPATH/$CONTENT.output | /usr/bin/awk '{print $NF}'`
    do
      if [[ $j -gt 128 ]]
      then
        echo "WARNING: Dispersion/Jitter is greater than 128ms. ntp is discarding time references from this source." >> $SVRPATH/config.status
        echo "WARNING: Dispersion/Jitter is greater than 128ms. ntp is discarding time references from this source." >> $SVRPATH/morning.status
        chmod 664 $SVRPATH/config.status
        chmod 664 $SVRPATH/morning.status
      fi
    done
# if the two time sources are configured, expect that the both servers are configured or report an error.
    /usr/bin/grep ${TIMESOURCE1} $SVRPATH/$CONTENT.output > /dev/null
    if [ $? -eq 0 ]
    then
      /usr/bin/grep ${TIMESOURCE2} $SVRPATH/$CONTENT.output > /dev/null
      if [ $? -eq 1 ]
      then
        echo "WARNING: ${TIMESOURCE1} is configured but not ${TIMESOURCE2}" >> $SVRPATH/config.status
        echo "WARNING: ${TIMESOURCE1} is configured but not ${TIMESOURCE2}" >> $SVRPATH/morning.status
        chmod 664 $SVRPATH/config.status
        chmod 664 $SVRPATH/morning.status
      fi
    fi
    /usr/bin/grep ${TIMESOURCE2} $SVRPATH/$CONTENT.output > /dev/null
    if [ $? -eq 0 ]
    then
      /usr/bin/grep ${TIMESOURCE1} $SVRPATH/$CONTENT.output > /dev/null
      if [ $? -eq 1 ]
      then
        echo "WARNING: ${TIMESOURCE2} is configured but not ${TIMESOURCE1}" >> $SVRPATH/config.status
        echo "WARNING: ${TIMESOURCE2} is configured but not ${TIMESOURCE1}" >> $SVRPATH/morning.status
        chmod 664 $SVRPATH/config.status
        chmod 664 $SVRPATH/morning.status
      fi
    fi
  else
    echo "WARNING: Unable to process $CONTENT.output. Is time configured on this server?" >> $SVRPATH/config.status
    echo "WARNING: Unable to process $CONTENT.output. Is time configured on this server?" >> $SVRPATH/morning.status
  fi

done

exit 0

